package leetcode.q2444

import io.kotest.core.spec.style.FunSpec
import io.kotest.matchers.shouldBe

class SolutionTest : FunSpec({

    test("countSubarrays1") {

        val nums = intArrayOf(1, 3, 5, 2, 7, 5)
        val minK = 1
        val maxK = 5
        val output = 2L

        SolutionFail().countSubarrays(nums, minK, maxK) shouldBe output
    }

    test("countSubarrays2") {

        val nums = intArrayOf(1, 1, 1, 1)
        val minK = 1
        val maxK = 1
        val output = 10L

        SolutionFail().countSubarrays(nums, minK, maxK) shouldBe output
    }

    test("countSubarrays3") {

        val nums = intArrayOf(
            35054,
            398719,
            945315,
            945315,
            820417,
            945315,
            35054,
            945315,
            171832,
            945315,
            35054,
            109750,
            790964,
            441974,
            552913
        )
        val minK = 35054
        val maxK = 945315
        val output = 81L

        SolutionFail().countSubarrays(nums, minK, maxK) shouldBe output
    }

    test("countSubarrays4") {

        val nums = intArrayOf(927611,342210,50316,885035,666481,50316,927611,927611,984440,25273,582906,927611,428691,711050,
            263805,562941,773997,910116,927611,91699,343346,50316,927611,50316,927611,913704,486247,912554,691611,
            877225,933832,52915,50316,927611,50316,50316,50316,50316,927611,675363,153022,927611,50316,50316,198012,
            355118,199176,50316,125711,735478,944498,913504,927611,157479,725925,863660,68502,94509,50316,50316,426813,
            927611,927611,927611,50316,927611,301419,50316,927611,424774,799605,615947,927611,927611,927611,596734,50316,
            209195,927611,927611,927611,50316,305487,334655,50316,18753,927611,83450,354415,680200,685594,50316,305175,
            50316,316257,148828,927611,50316,151735,50316,556255,326179,50316,50316,41497,964978,570193,121111,618152,
            820924,283605,601862,50316,496737,50316,927611,927611,817471,381431,830196,50316,883695,977340,17074,5225,
            927611,406051,838070,85760,927611,529120,679061,927611,890124,67464,246846,50316,711872,906618,45643,50316,
            927611,50316,362608,50316,927611,927611,217864,518484,927611,808321,927611,927611,927611,405997,927611,610973,
            927611,50316,30217,468977,199329,927611,203160,354829,50316,927611,50316,265714,795307,170965,50316,50316,927611,
            765725,50316,491343,588606,525959,763498,50316,927611,927611,50316,700731,927611,8400,823280,426640,927611,111174,
            692418,927611,927611,927611,814613,912772,236120,927611,50316,927611,50316,927611,50316,927611,927611,50316,927611,
            249817,927611,674670,380001,927611,50316,485068,927611,50316,651340,453620,50316,791246,50316,50316,553129,927611,
            927611,986168,927611,50316,813183,423827,50316,707927,673228,977034,930684,50316,50316,591907,943066,927611,927611,
            927611,50316,50316,927611,927611,927611,254116,927611,50316,927611,520137,597102,879848,909689,639683,109103,171149,
            46723,686855,927611,289090,927611,927611,50316,303007,927611,50316,154267,50316,50316,50316,521877,508925,213112,
            937756,927611,927611,186114,50316,50316,50316,890254,927611,927611,50316,750539,927611,543916,160132,927611,562040,
            927611,4988,623566,927611,711861,412216,927611,976275,475408,654054,320436,50316,253715,50316,256549,711771,264661,
            927611,50316,927611,320774,927611,927611,303833,515915,927611,186072,218798,148858,927611,927611,50316,50316,50316,
            779690,228981,50316,230354,65439,946299,927611,833692,542095,556514,672759,51471,50316,626420,204871,910931,10678,
            50316,927611,50316,927611,42301,927611,50316,927611,50316,927611,841324,52980,50316,927611,50316,927611,50316,
            276003,927611,620661,927611,34273,927611,50316,242595,927611,61598,50316,288086,927611,461160,470285,50316,97569,
            50316,927611,927611,582259,253921,125121,927611,927611,927611,927611,535879,50316,927611,927611,655029,927611,50316,
            927611,553199,927611,927611,50316,50316,927611,4481,295193,305755,415682,414067,50316,50316,515429,734459,364841,927611,
            833880,25462,39898,927611,50316,740934,221266,927611,927611,716134,927611,746415,932727,927611,927611,927611,50316,444491,
            50316,927611,50316,637865,58749,927611,50316,927611,927611,412323,310774,664436,50316,991378,541500,43758,973118,50316,50316,
            50316,50316,927611,927611,756725,15804,741574,892042,756699,50316,927611,50316,927611,301810,927611,50316,927611,985971,646557,
            226318,50316,927611,408328,28792,867820,927611,326897,50316,927611,336056,927611,927611,50316,50316,50316,50316,534796,523677,
            180725,927611,720058,50316,50316,927611,927611,50316,379781,927611,927611,319019,50316,224,113589,967402,50316,338902,927611,
            50316,50316,366162,145275,903753,215008,50316,50316,50316,743714,50316,50316,713629,799316,86981,50316,927611,927611,75560,
            214863,927611,696331,617790,677778,50316,50316,50316,296376,927611,927611,78782,927611,481127,704619,50316,677234,50316,
            50316,995143,50316,80199,927611,243451,927611,115959,861408,50316,50316,599067,599907,568384,50316,50316,799473,927611,
            50316,50316,153322,927611,50316,927611,50316,168881,50316,512362,578694,50316,385226,484013,50316,50316,50316,927611,
            50316,927611,927611,165650,50316,982594,927611,50316,50316,507609,213352,587021,178436,242982,50316,312574,927611,
            228204,927611,50316,927611,417562,50316,50316,747790,370292,50316,927611,813096,927611,70910,235615,50316,50316,50316)
        val minK = 50316
        val maxK = 927611
        val output = 5299

        SolutionFail().countSubarrays(nums, minK, maxK) shouldBe output
    }
})
